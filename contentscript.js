// Generated by LiveScript 1.4.0
(function(){
  var coverElem, updateCoverElem, injectUtil, getGoodAdIframeSrc, check_if_blocked, check_if_iframe_blocked, check_if_img_blocked, whitelist, block_img_tags, is_iframe_ad;
  coverElem = function(iframeuid, tag){
    var jtag, ref$, left, top, coverelem, parent;
    jtag = $(tag);
    ref$ = jtag.position(), left = ref$.left, top = ref$.top;
    coverelem = $('<div>');
    coverelem[0].setAttribute('iframeuid', iframeuid);
    coverelem.css('display', jtag.css('display'));
    coverelem.css({
      'position': 'absolute',
      'z-index': Number.MAX_VALUE,
      'background-color': 'yellow',
      'width': jtag.width(),
      'height': jtag.height(),
      'top': top,
      'left': left
    });
    coverelem.click(function(){
      return $(this).hide();
    });
    parent = jtag.parent();
    if (parent == null || parent.length === 0) {
      parent = $('html');
    }
    coverelem.appendTo(parent);
  };
  updateCoverElem = function(iframeuid, tag){
    var jtag, ref$, left, top, coverelem;
    jtag = $(tag);
    ref$ = jtag.position(), left = ref$.left, top = ref$.top;
    coverelem = $('div[iframeuid="' + iframeuid + '"]');
    coverelem.css('display', jtag.css('display'));
    coverelem.css({
      'position': 'absolute',
      'z-index': Number.MAX_VALUE,
      'background-color': 'yellow',
      'width': jtag.width(),
      'height': jtag.height(),
      'top': top,
      'left': left
    });
  };
  
  // Remove an element from the page.
  function destroyElement(el, elType) {
    if (el.nodeName == "FRAME") {
      removeFrame(el);
    }
    else if (elType != ElementTypes.script) {
      // There probably won't be many sites that modify all of these.
      // However, if we get issues, we might have to set the location and size
      // via the css properties position, left, top, width and height
      el.style.setProperty("display", "none", "important");
      el.style.setProperty("visibility", "hidden", "important");
      el.style.setProperty("opacity", "0", "important");
      var w = (el.width === undefined ? -1 : el.width);
      var h = (el.height === undefined ? -1 : el.height);
      el.style.setProperty("background-position", w + "px " + h + "px");
      el.setAttribute("width", 0);
      el.setAttribute("height", 0);
    }
  }
  
  
  function injectJs(link) {
          var idname = 'injected_' + link
          //if (document.getElementById(idname)) return;
          var scr = document.createElement("script");
          scr.id='injected_' + link
          scr.type="text/javascript";
          scr.src=link;
          (document.head || document.body || document.documentElement).appendChild(scr);
  }
  
  injectUtil = function(){
    return injectJs(chrome.extension.getURL("inject.js"));
  };
  getGoodAdIframeSrc = function(width, height){
    if (width == null) {
      width = 200;
    }
    if (height == null) {
      height = 200;
    }
    return baseurl + '?' + $.param({
      width: width,
      height: height
    });
  };
  check_if_blocked = function(data, callback){
    data.type = 'isblocked';
    data.domain = '/' + window.location.hostname;
    return chrome.runtime.sendMessage(data, callback);
  };
  check_if_iframe_blocked = function(data, callback){
    if (data.url == null) {
      data = {
        url: data
      };
    }
    data.elemtype = 'iframe';
    return check_if_blocked(data, callback);
  };
  check_if_img_blocked = function(data, callback){
    if (data.url == null) {
      data = {
        url: data
      };
    }
    data.elemtype = 'img';
    return check_if_blocked(data, callback);
  };
  if (top !== window) {
    whitelist = {
      'localhost': 'localhost',
      'feedlearn.herokuapp.com': 'feedlearn.herokuapp.com'
    };
    if (whitelist[window.location.hostname] != null) {
      return;
    }
    check_if_iframe_blocked(window.location.href, function(isblocked){
      console.log('trying to block, first try: ' + window.location.toString());
      if (isblocked) {
        setInterval(function(){
          return console.log('trying to block, but unsuccessful: ' + window.location.toString());
        }, 2000);
        return window.location.href = getGoodAdIframeSrc(window.innerWidth, window.innerHeight);
      }
    });
  }
  /*
  else
    content_scripts = []
    window.addEventListener 'message', (evt) ->
      if not evt? or not evt.data?
        return
      etype = evt.data.type
      if not etype?
        return
      if etype == 'contentscriptloaded'
        {location} = evt.data
        if content_scripts.indexOf(location) == -1
          content_scripts.push location
          console.log 'content_scripts loaded:'
          console.log content_scripts
  */
  block_img_tags = function(basedoc){
    var domain, i$, ref$, len$, results$ = [];
    domain = '/' + window.location.hostname;
    for (i$ = 0, len$ = (ref$ = basedoc.getElementsByTagName('img')).length; i$ < len$; ++i$) {
      results$.push((fn$.call(this, ref$[i$])));
    }
    return results$;
    function fn$(tag){
      if (!tag.src || tag.checkedsrc === tag.src) {
        return;
      }
      return check_if_img_blocked(tag.src, function(isblocked){
        tag.checkedsrc = tag.src;
        if (isblocked) {
          tag.src = '';
          return tag.checkedsrc = tag.src;
        }
      });
    }
  };
  is_iframe_ad = function(iframe, callback){
    var urls_to_check, res$, i$, ref$, len$, x, domain;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = [iframe.src, iframe.id, iframe.name]).length; i$ < len$; ++i$) {
      x = ref$[i$];
      if (x != null && x.length > 0) {
        res$.push(x);
      }
    }
    urls_to_check = res$;
    console.log('checking urls for iframe');
    console.log(urls_to_check);
    domain = '/' + window.location.hostname;
    return check_if_iframe_blocked(urls_to_check, function(isblocked){
      console.log('isblocked:');
      return callback(isblocked);
    });
  };
  setInterval(function(){
    var i$, ref$, len$, results$ = [];
    block_img_tags(document);
    for (i$ = 0, len$ = (ref$ = document.getElementsByTagName('iframe')).length; i$ < len$; ++i$) {
      results$.push((fn$.call(this, ref$[i$])));
    }
    return results$;
    function fn$(iframe){
      var e;
      try {
        if (iframe.src && iframe.src.length && iframe.src.length > 0 && iframe.alreadychecked === iframe.src) {
          return;
        }
        is_iframe_ad(iframe, function(is_ad){
          if (is_ad) {
            iframe.src = getGoodAdIframeSrc($(iframe).width(), $(iframe).height());
            return iframe.alreadychecked = iframe.src;
          }
        });
        return block_img_tags(iframe.contentDocument);
      } catch (e$) {
        e = e$;
      }
    }
  }, 2000);
  window.addEventListener('message', function(evt, sender){
    var etype, iframeuid, location, ref$;
    if (evt == null || evt.data == null) {
      return;
    }
    etype = evt.data.type;
    if (etype == null) {
      return;
    }
    console.log('contentscript received message');
    console.log(evt);
    if (etype === 'getlocation') {
      iframeuid = evt.data.iframeuid;
      if (iframeuid == null) {
        return;
      }
      location = window.location.href;
      evt.source.postMessage({
        type: 'sendlocation',
        location: location,
        iframeuid: iframeuid
      }, '*');
      parent.postMessage({
        type: 'sendlocation',
        location: location,
        iframeuid: iframeuid
      }, '*');
    }
    if (etype === 'sendlocation') {
      console.log('received location');
      console.log(evt);
      ref$ = evt.data, location = ref$.location, iframeuid = ref$.iframeuid;
      return document.querySelector('iframe[iframeuid="' + iframeuid + '"]').setAttribute('realiframesrc', location);
    }
  });
  /*
  setInterval ->
    #console.log 'content script running'
    domain = '/' + window.location.hostname
    for let tagtype in ['iframe'] # ['img'] #, 'iframe']
      for let tag in document.getElementsByTagName(tagtype)
        if tag.getAttribute 'isblocked'
          tag.setAttribute 'src', '//feedlearn.herokuapp.com'
  , 2000
  */
  /*
  getIframeUID = (tag) ->
    iframeuid = tag.getAttribute('iframeuid')
    if iframeuid?
      return iframeuid
    iframeuid = Math.floor(1 + Math.random() * 999999999).toString()
    tag.setAttribute 'iframeuid', iframeuid
    return iframeuid
  
  setInterval ->
    #console.log 'content script running'
    domain = '/' + window.location.hostname
    for let tagtype in ['iframe'] # ['img'] #, 'iframe']
      for let tag in document.getElementsByTagName(tagtype)
        iframeuid = getIframeUID(tag)
        #tag.contentWindow.postMessage {type: 'getlocation', iframename: 'sdfdalkfj'}, '*'
        iframesrc = tag.getAttribute('realiframesrc')
        if not iframesrc? or iframesrc.length == 0
          #console.log 'posting message to iframeuid: ' + iframeuid
          tag.contentWindow.postMessage {type: 'getlocation', iframeuid}, '*'
          return
        if iframesrc == tag.getAttribute('alreadychecked')
          if tag.getAttribute 'isiframeblocked'
            updateCoverElem iframeuid, tag
          return
        #console.log iframesrc
        #if tagtype == 'iframe'
        #  console.log tag
        tag.setAttribute 'alreadychecked', iframesrc
        #do ->
        chrome.runtime.sendMessage {type: 'isblocked', domain, elemtype: tagtype, url: [iframesrc]}, (isblocked) ->
          isblocked = true
          #console.log tag.src + ' isblocked: ' + isblocked
          tag.setAttribute 'isiframeblocked', isblocked
          if isblocked
            #console.log 'blocked ' + iframeuid + ' from ' + iframesrc
            coverElem iframeuid, tag
  , 2000
  */
}).call(this);
